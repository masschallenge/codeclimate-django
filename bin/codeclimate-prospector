#!/usr/bin/env python

import subprocess
import simplejson as json

config_json = {}

pylint_codes = {}

remediation_multiplier = {}

severity_types = {
  'I': 'info',  # info
  'C': 'normal',  # convention
  'R': 'normal',  # refactor
  'W': 'normal',  # warning
  'E': 'critical',  # error
  'F': 'critical'  # fatal
}

with open('/usr/src/app/config/pylint-codes.json', 'rb') as fhandle:
    pylint_codes = json.load(fhandle)

with open('/usr/src/app/config/pylint-points.json', 'rb') as fhandle:
    remediation_multiplier = json.load(fhandle)


def get_config_part():
    with open('/config.json', 'rb') as fhandle:
        config_json = json.load(fhandle)

    config_part = ""
    config_file = config_json.get('config')

    if config_file:
        config_part = "--profile-path /code --profile \"/code/%s\"" % config_file
    else:
        config_part = "--uses django celery flask --with-tool mccabe --with-tool frosted --with-tool pyroma  --with-tool dodgy --with-tool pyflakes --with-tool pep257 --with-tool pep8 --with-tool pylint --with-tool vulture"

    return config_part


def run_prospector():
    config_options = get_config_part()
    prospector_command = 'PYTHONPATH=${PYTHONPATH}:/code prospector  --messages-only --zero-exit %s --output-format json -p /code' % config_options
    cmd = subprocess.Popen(
        prospector_command,
        shell=True,
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE)
    return cmd.communicate()[0]

text = run_prospector()

output = json.loads(text)

for parsed in output['messages']:
    severity_code = ''
    remediation_points = 50000
    severity_type = 'normal'
    if parsed['source'] == 'pylint':
        severity_code = pylint_codes.get(parsed['code'])
        remediation_points *= remediation_multiplier.get(severity_code, 1)
    elif (
          parsed['source'] == 'pep8') or (
          parsed['source'] == 'pep257') or (
          parsed['source'] == 'frosted') or (
          parsed['source'] == 'pyflakes') or (
          parsed['source'] == 'frosted'):
        severity_code = parsed['code']
    if severity_code:
        severity_type = severity_types.get(severity_code[0].upper(), 'normal')

    print json.dumps({
      "type": 'issue',
      'severity': severity_type,
      "check_name": parsed['code'],
      "description": parsed['message'],
      "remediation_points": remediation_points,
      "categories": ["Bug Risk"],
      "location": parsed['location']
    }) + "\x00"
